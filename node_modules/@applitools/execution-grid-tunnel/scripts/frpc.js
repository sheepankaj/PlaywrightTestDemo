const fs = require('fs')
const https = require('https')
const crypto = require('crypto')
const {FrpcDownloadError} = require('../src/utils')

module.exports = {getExpectedHash, downloadFrpc, getBinHash, getFrpcDownloadLink, getManualFrpcInstallingErrorMessage, getFrpcErrorMessage }

const binHashMap = new Map()
binHashMap.set('darwin_x64', '+RP+HSFGWPsH9OOqW+lzxQZwP3kuZz4PUd0m7ZIFfmU=')
binHashMap.set('darwin_arm64', 'DC9PAeRsLMxXfmZ1TlRF/h6q8rWjATByTgMCuRZTe+A=')
binHashMap.set('linux_x64', 'AW+qGA7k6YvR08tPlPMVadq1fwju3206WMaAJUVv1jQ=')
binHashMap.set('win32_x64', 'XJKhP+BxycN8p6ofr7i8esBFY/0gyHvlhZSpwI7MLc8=')

function getExpectedHash({platform, arch}){
  const key = `${platform}_${arch}`
  return binHashMap.has(key)? binHashMap.get(key): undefined
}

async function getBinHash(binPath){
  const hash = crypto.createHash('sha256')
  const buffer = await fs.promises.readFile(binPath)
  const actualHash = hash.update(buffer).digest('base64')

  return actualHash
}

async function downloadFrpc({platform, arch, cacheDirectoryPath, frpcPath, shouldUpdate}) {
  const expectedHash = getExpectedHash({platform, arch})
  const url = getFrpcDownloadLink({platform, arch})

  try{
    await _downloadBin({ filename: frpcPath, url})
    const actualHash = await getBinHash(frpcPath)

    if (actualHash !== expectedHash) throw new Error(`Checksum failed: expected: ${expectedHash} actual: ${actualHash}`)
  }
  catch(e){
    console.log(error.message)
    fs.unlinkSync(frpcPath)
    
    throw new FrpcDownloadError(url, cacheDirectoryPath, frpcPath, getFrpcErrorMessage({url, cacheDirectoryPath, shouldUpdate}))
  }

  await fs.promises.chmod(frpcPath, 0o777)
}

function getFrpcDownloadLink({platform, arch}){
  const fileSuffix = platform === 'win32' ? '.exe' : ''
  return `https://applitools.jfrog.io/artifactory/execution-grid/frpc/${platform}/${arch}/frpc${fileSuffix}`
}

function getFrpcErrorMessage({url, cacheDirectoryPath, shouldUpdate }){
  const prefix = shouldUpdate? `We Failed to update applitools frpc`: `We Failed to install applitools frpc.`
  return `${prefix} Please download it from ${url} and locate it in ${cacheDirectoryPath}. Our SDK needs the file for running a tunnel`
}

function getManualFrpcInstallingErrorMessage({platform, arch, shouldUpdate, cacheDirectoryPath, frpcPath}){
  const prefix = shouldUpdate ? `Please update frpc file. We found that there is a file on ${frpcPath} but we need newer version`:
  `Please Download frpc file and locate is in ${cacheDirectoryPath}. Our SDK needs the file ${frpcPath}`

  return `${prefix}. You can download the file from ${getFrpcDownloadLink({platform,arch})}`
}

const _downloadBin = function ({filename, url}) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(filename)

    https
      .get(url, function (response) {
        response.pipe(file)
        file.on('finish', function () {
          file.close((err) => {
            if (!err) resolve()
            else reject(err)
          })
        })
      })
      .on('error', function (err) {
        fs.unlinkSync(filename)
        reject(err)
      })
  })
}
