declare const _default: import('@applitools/driver').SpecDriver<SpecType>;
export default _default;
export function isDriver(page: any): page is Driver;
export function isContext(frame: any): frame is Context;
export function isElement(element: any): element is Element<Node>;
export function isSelector(selector: any): selector is Selector;
export function transformSelector(selector: import('@applitools/driver').CommonSelector<Selector>): Selector;
export function untransformSelector(selector: Selector): import('@applitools/driver').CommonSelector<never>;
export function extractContext(page: Driver | Context): Context;
export function isStaleElementError(err: any): boolean;
export function executeScript(frame: Context, script: string | ((arg: any) => any), arg: any): Promise<any>;
export function mainContext(frame: Context): Promise<Context>;
export function parentContext(frame: Context): Promise<Context>;
export function childContext(_frame: Context, element: Element<Node>): Promise<Context>;
export function findElement(frame: Context, selector: Selector, parent?: undefined | Element<Node>): Promise<null | Element<HTMLElement | SVGElement>>;
export function findElements(frame: Context, selector: Selector, parent?: undefined | Element<Node>): Promise<Array<Element<HTMLElement | SVGElement>>>;
export function setElementText(frame: Context, element: Selector | Element<Node>, text: string): Promise<void>;
export function getViewportSize(page: Driver): Promise<{ width: number; height: number; }>;
export function setViewportSize(page: Driver, size: { width: number; height: number; }): Promise<void>;
export function getCookies(page: Driver): Promise<Array<import('@applitools/driver').Cookie>>;
export function getDriverInfo(_page: Driver): Promise<import('@applitools/driver').DriverInfo>;
export function getTitle(page: Driver): Promise<string>;
export function getUrl(page: Driver): Promise<string>;
export function visit(page: Driver, url: string): Promise<void>;
export function takeScreenshot(page: Driver): Promise<Buffer>;
export function click(frame: Context, element: Selector | Element<Node>): Promise<void>;
export function hover(frame: Context, element: Selector | Element<Node>): Promise<void>;
export function scrollIntoView(frame: Context, element: Selector | Element<Node>, align: boolean): Promise<void>;
export function waitUntilDisplayed(frame: Context, selector: Selector): Promise<void>;
export function build(env: any): Promise<[Driver, () => Promise<void>]>;
export type Driver = import('playwright').Page & { __applitoolsBrand?: undefined; };
export type Context = import('playwright').Frame & { __applitoolsBrand?: undefined; };
export type Element<T = Node> = import('playwright').ElementHandle<T> & { __applitoolsBrand?: undefined; };
export type Selector = (string | import('playwright').Locator) & { __applitoolsBrand?: undefined; };
export type SpecType = { driver: Driver; context: Context; element: Element<Node>; selector: Selector; };
