"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractBrokerUrl = void 0;
const utils = __importStar(require("@applitools/utils"));
async function extractBrokerUrl({ driver, logger, }) {
    if (!driver.isNative)
        return null;
    logger.log('Broker url extraction is started');
    const element = await driver.element({ type: 'accessibility id', selector: 'Applitools_View' });
    if (!element)
        return null;
    try {
        let result;
        do {
            result = JSON.parse(await element.getText());
            if (result.nextPath) {
                logger.log('Broker url was extraction finished successfully with value', result.nextPath);
                return result.nextPath;
            }
            await utils.general.sleep(1000);
        } while (!result.error);
        logger.error('Broker url extraction has failed with error', result.error);
        return null;
    }
    catch (error) {
        return null;
    }
}
exports.extractBrokerUrl = extractBrokerUrl;
