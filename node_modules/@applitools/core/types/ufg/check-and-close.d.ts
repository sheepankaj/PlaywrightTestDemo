import type { Region } from '@applitools/utils';
import type { DriverTarget, Target, Eyes, CheckSettings, TestResult, CloseSettings } from './types';
import { type AbortSignal } from 'abort-controller';
import { type Logger } from '@applitools/logger';
import { type UFGClient } from '@applitools/ufg-client';
import { type SpecType, type SpecDriver } from '@applitools/driver';
type Options<TSpec extends SpecType> = {
    eyes: Eyes<TSpec>;
    client: UFGClient;
    target?: DriverTarget<TSpec>;
    spec?: SpecDriver<TSpec>;
    signal?: AbortSignal;
    logger: Logger;
};
export declare function makeCheckAndClose<TSpec extends SpecType>({ spec, eyes, client, signal, target: defaultTarget, logger: defaultLogger, }: Options<TSpec>): ({ target, settings, logger, }: {
    target?: Target<TSpec> | undefined;
    settings?: (import("@applitools/core-base").CheckSettings<Region | import("@applitools/driver").ElementReference<TSpec>> & import("./types").ScreenshotSettings<TSpec> & {
        renderers?: import("@applitools/ufg-client").Renderer[] | undefined;
        hooks?: {
            beforeCaptureScreenshot: string;
        } | undefined;
        disableBrowserFetching?: boolean | undefined;
        layoutBreakpoints?: boolean | number[] | undefined;
        ufgOptions?: Record<string, any> | undefined;
        nmgOptions?: Record<string, any> | undefined;
        autProxy?: (import("@applitools/req").Proxy & {
            mode?: "Allow" | "Block" | undefined;
            domains?: string[] | undefined;
        }) | undefined;
    } & CloseSettings) | undefined;
    logger?: Logger | undefined;
}) => Promise<TestResult[]>;
export {};
