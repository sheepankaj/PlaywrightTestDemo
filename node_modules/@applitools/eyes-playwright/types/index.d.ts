export type Driver = import('playwright').Page & { __applitoolsBrand?: undefined; };
export type Context = import('playwright').Frame & { __applitoolsBrand?: undefined; };
export type Element = import('playwright').ElementHandle & { __applitoolsBrand?: undefined; };
export type Selector = (string | import('playwright').Locator) & { __applitoolsBrand?: undefined; };
export type SpecType = { driver: Driver; context: Context; element: Element; selector: Selector; };
export class Eyes {
    static setViewportSize: (driver: Driver, viewportSize: RectangleSize) => Promise<void>;
    static getExecutionCloudUrl(config?: undefined | ConfigurationPlain): Promise<string>;
    constructor(runner?: undefined | EyesRunner, config?: undefined | ConfigurationPlain);
    constructor(config?: undefined | ConfigurationPlain);
    get logger(): Logger;
    getLogger(): Logger;
    get runner(): EyesRunner;
    getRunner(): EyesRunner;
    get driver(): Driver;
    getDriver(): Driver;
    get configuration(): ConfigurationPlain;
    set configuration(configuration: ConfigurationPlain);
    getConfiguration(): Configuration;
    setConfiguration(config: ConfigurationPlain): void;
    get isOpen(): boolean;
    getIsOpen(): boolean;
    getExecutionCloudUrl(): Promise<string>;
    open(driver: Driver, config?: undefined | ConfigurationPlain): Promise<Driver>;
    open(driver: Driver, appName?: undefined | string, testName?: undefined | string, viewportSize?: undefined | RectangleSizePlain, sessionType?: undefined | "SEQUENTIAL" | "PROGRESSION"): Promise<Driver>;
    open(config?: undefined | ConfigurationPlain): Promise<void>;
    open(appName?: undefined | string, testName?: undefined | string, viewportSize?: undefined | RectangleSizePlain, sessionType?: undefined | "SEQUENTIAL" | "PROGRESSION"): Promise<void>;
    check(name: string, checkSettings: CheckSettingsImage | CheckSettingsAutomation): Promise<MatchResult>;
    check(target: {
        image: string | URL | Buffer;
        name?: undefined | string;
        dom?: undefined | string;
        locationInViewport?: undefined | LocationPlain;
        locationInView?: undefined | LocationPlain;
        fullViewSize?: undefined | RectangleSizePlain;
    }, checkSettings?: undefined | CheckSettingsImagePlain): Promise<MatchResult>;
    check(checkSettings?: undefined | CheckSettingsAutomationPlain): Promise<MatchResult>;
    locate<TLocator extends string>(settings: VisualLocatorSettings<TLocator>): Promise<Record<TLocator, Array<RegionPlain>>>;
    extractTextRegions<TPattern extends string>(target: {
        image: string | URL | Buffer;
        size?: undefined | { width: number; height: number; };
        name?: undefined | string;
        source?: undefined | string;
        dom?: undefined | string;
        locationInViewport?: undefined | { x: number; y: number; };
        locationInView?: undefined | { x: number; y: number; };
        fullViewSize?: undefined | { width: number; height: number; };
    }, settings: OCRSettings<TPattern>): Promise<Record<TPattern, Array<TextRegion>>>;
    extractTextRegions<TPattern extends string>(settings: OCRSettings<TPattern>): Promise<Record<TPattern, Array<TextRegion>>>;
    extractText(target: {
        image: string | URL | Buffer;
        size?: undefined | { width: number; height: number; };
        name?: undefined | string;
        source?: undefined | string;
        dom?: undefined | string;
        locationInViewport?: undefined | { x: number; y: number; };
        locationInView?: undefined | { x: number; y: number; };
        fullViewSize?: undefined | { width: number; height: number; };
    }, settings: Array<OCRRegion>): Promise<Array<string>>;
    extractText(settings: Array<OCRRegion>): Promise<Array<string>>;
    close(throwErr?: undefined | boolean): Promise<TestResults>;
    abort(): Promise<TestResults>;
    getViewportSize(): Promise<RectangleSize>;
    setViewportSize(size: RectangleSizePlain): Promise<void>;
    getScrollRootElement(): Element | EyesSelector<Selector>;
    setScrollRootElement(scrollRootElement: Element | EyesSelector<Selector>): void;
    setLogHandler(handler: LogHandlerPlain | LogHandler): void;
    getLogHandler(): LogHandler;
    setCutProvider(cutProvider: CutProvider): void;
    setImageCut(cutProvider: CutProvider): void;
    getIsCutProviderExplicitlySet(): boolean;
    getRotation(): ImageRotation;
    setRotation(rotation: ImageRotationPlain | ImageRotation): void;
    getScaleRatio(): number;
    setScaleRatio(scaleRatio: number): void;
    getSaveDebugScreenshots(): boolean;
    setSaveDebugScreenshots(save: boolean): void;
    getDebugScreenshotsPath(): string;
    setDebugScreenshotsPath(path: string): void;
    getDebugScreenshotsPrefix(): string;
    setDebugScreenshotsPrefix(prefix: string): void;
    addProperty(name: string, value: string): Configuration;
    clearProperties(): Configuration;
    getBatch(): BatchInfo;
    setBatch(batch: BatchInfoPlain): void;
    setBatch(name: string, id?: undefined | string, startedAt?: undefined | string | Date): void;
    getApiKey(): string;
    setApiKey(apiKey: string): void;
    getTestName(): string;
    setTestName(testName: string): void;
    getAppName(): string;
    setAppName(appName: string): void;
    getBaselineBranchName(): string;
    setBaselineBranchName(baselineBranchName: string): void;
    getBaselineEnvName(): string;
    setBaselineEnvName(baselineEnvName: string): void;
    getBranchName(): string;
    setBranchName(branchName: string): void;
    getHostApp(): string;
    setHostApp(hostApp: string): void;
    getHostOS(): string;
    setHostOS(hostOS: string): void;
    getHostAppInfo(): string;
    setHostAppInfo(hostAppInfo: string): void;
    getHostOSInfo(): string;
    setHostOSInfo(hostOSInfo: string): void;
    getDeviceInfo(): string;
    setDeviceInfo(deviceInfo: string): void;
    setIgnoreCaret(ignoreCaret: boolean): void;
    getIgnoreCaret(): boolean;
    getIsDisabled(): boolean;
    setIsDisabled(isDisabled: boolean): void;
    getMatchLevel(): MatchLevel;
    setMatchLevel(matchLevel: MatchLevelPlain): void;
    getMatchTimeout(): number;
    setMatchTimeout(matchTimeout: number): void;
    getParentBranchName(): string;
    setParentBranchName(parentBranchName: string): void;
    setProxy(proxy: ProxySettingsPlain): void;
    setProxy(url: string, username?: undefined | string, password?: undefined | string, isHttpOnly?: undefined | boolean): void;
    setProxy(isEnabled: false): void;
    getProxy(): ProxySettings;
    getSaveDiffs(): boolean;
    setSaveDiffs(saveDiffs: boolean): void;
    getSaveNewTests(): boolean;
    setSaveNewTests(saveNewTests: boolean): void;
    getServerUrl(): string;
    setServerUrl(serverUrl: string): void;
    getSendDom(): boolean;
    setSendDom(sendDom: boolean): void;
    getHideCaret(): boolean;
    setHideCaret(hideCaret: boolean): void;
    getHideScrollbars(): boolean;
    setHideScrollbars(hideScrollbars: boolean): void;
    getForceFullPageScreenshot(): boolean;
    setForceFullPageScreenshot(forceFullPageScreenshot: boolean): void;
    getWaitBeforeScreenshots(): number;
    setWaitBeforeScreenshots(waitBeforeScreenshots: number): void;
    getStitchMode(): StitchMode;
    setStitchMode(stitchMode: StitchModePlain): void;
    getStitchOverlap(): number;
    setStitchOverlap(stitchOverlap: number): void;
}
export type ConfigurationPlain = {
    agentId?: undefined | string;
    apiKey?: undefined | string;
    serverUrl?: undefined | string;
    proxy?: undefined | ProxySettingsPlain;
    autProxy?: undefined | (ProxySettingsPlain & { mode?: undefined | "Allow" | "Block"; domains?: undefined | Array<string>; });
    isDisabled?: undefined | boolean;
    appName?: undefined | string;
    testName?: undefined | string;
    displayName?: undefined | string;
    viewportSize?: undefined | RectangleSizePlain;
    sessionType?: undefined | "SEQUENTIAL" | "PROGRESSION";
    properties?: undefined | Array<PropertyDataPlain>;
    batch?: undefined | BatchInfoPlain;
    defaultMatchSettings?: undefined | ImageMatchSettingsPlain;
    hostApp?: undefined | string;
    hostOS?: undefined | string;
    hostAppInfo?: undefined | string;
    hostOSInfo?: undefined | string;
    deviceInfo?: undefined | string;
    baselineEnvName?: undefined | string;
    environmentName?: undefined | string;
    branchName?: undefined | string;
    parentBranchName?: undefined | string;
    baselineBranchName?: undefined | string;
    compareWithParentBranch?: undefined | boolean;
    ignoreBaseline?: undefined | boolean;
    ignoreGitMergeBase?: undefined | boolean;
    saveFailedTests?: undefined | boolean;
    saveNewTests?: undefined | boolean;
    saveDiffs?: undefined | boolean;
    sendDom?: undefined | boolean;
    matchTimeout?: undefined | number;
    forceFullPageScreenshot?: undefined | boolean;
    waitBeforeScreenshots?: undefined | number;
    stitchMode?: undefined | "Scroll" | "CSS";
    hideScrollbars?: undefined | boolean;
    hideCaret?: undefined | boolean;
    stitchOverlap?: undefined | number;
    scrollRootElement?: undefined | Element | EyesSelector<Selector>;
    cut?: undefined | CutProviderPlain;
    rotation?: undefined | ImageRotationPlain;
    scaleRatio?: undefined | number;
    waitBeforeCapture?: undefined | number;
    browsersInfo?: undefined | Array<DesktopBrowserInfo | ChromeEmulationInfo | IOSDeviceInfo | AndroidDeviceInfo>;
    visualGridOptions?: undefined | Record<string, any>;
    layoutBreakpoints?: undefined | boolean | Array<number>;
    disableBrowserFetching?: undefined | boolean;
};
export class Configuration implements Required<ConfigurationPlain> {
    constructor(config?: undefined | ConfigurationPlain, spec?: undefined | {});
    get appName(): string;
    set appName(appName: string);
    getAppName(): string;
    setAppName(appName: string): Configuration;
    get testName(): string;
    set testName(testName: string);
    getTestName(): string;
    setTestName(testName: string): Configuration;
    get displayName(): string;
    set displayName(displayName: string);
    getDisplayName(): string;
    setDisplayName(displayName: string): Configuration;
    get isDisabled(): boolean;
    set isDisabled(isDisabled: boolean);
    getIsDisabled(): boolean;
    setIsDisabled(isDisabled: boolean): Configuration;
    get matchTimeout(): number;
    set matchTimeout(matchTimeout: number);
    getMatchTimeout(): number;
    setMatchTimeout(matchTimeout: number): Configuration;
    get sessionType(): SessionTypePlain;
    set sessionType(sessionType: SessionTypePlain);
    getSessionType(): SessionType;
    setSessionType(sessionType: SessionTypePlain): Configuration;
    get viewportSize(): RectangleSizePlain;
    set viewportSize(viewportSize: RectangleSizePlain);
    getViewportSize(): RectangleSize;
    setViewportSize(viewportSize: RectangleSizePlain): Configuration;
    get agentId(): string;
    set agentId(agentId: string);
    getAgentId(): string;
    setAgentId(agentId: string): Configuration;
    get apiKey(): string;
    set apiKey(apiKey: string);
    getApiKey(): string;
    setApiKey(apiKey: string): Configuration;
    get serverUrl(): string;
    set serverUrl(serverUrl: string);
    getServerUrl(): string;
    setServerUrl(serverUrl: string): Configuration;
    get proxy(): ProxySettingsPlain;
    set proxy(proxy: ProxySettingsPlain);
    getProxy(): ProxySettings;
    setProxy(proxy: ProxySettingsPlain): Configuration;
    setProxy(url: string, username?: undefined | string, password?: undefined | string, deprecatedIsHttpOnly?: undefined | boolean): Configuration;
    setProxy(isEnabled: false): Configuration;
    get autProxy(): ProxySettingsPlain & { mode?: undefined | "Allow" | "Block"; domains?: undefined | Array<string>; };
    set autProxy(autProxy: ProxySettingsPlain & { mode?: undefined | "Allow" | "Block"; domains?: undefined | Array<string>; });
    getAutProxy(): ProxySettingsPlain & { mode?: undefined | "Allow" | "Block"; domains?: undefined | Array<string>; };
    setAutProxy(autProxy: ProxySettingsPlain & { mode?: undefined | "Allow" | "Block"; domains?: undefined | Array<string>; }): Configuration;
    get batch(): BatchInfoPlain;
    set batch(batch: BatchInfoPlain);
    getBatch(): BatchInfo;
    setBatch(batch: BatchInfoPlain): Configuration;
    get properties(): Array<PropertyDataPlain>;
    set properties(properties: Array<PropertyDataPlain>);
    getProperties(): Array<PropertyData>;
    setProperties(properties: Array<PropertyDataPlain>): Configuration;
    addProperty(name: string, value: string): Configuration;
    addProperty(prop: PropertyDataPlain): Configuration;
    clearProperties(): Configuration;
    get baselineEnvName(): string;
    set baselineEnvName(baselineEnvName: string);
    getBaselineEnvName(): string;
    setBaselineEnvName(baselineEnvName: string): Configuration;
    get environmentName(): string;
    set environmentName(environmentName: string);
    getEnvironmentName(): string;
    setEnvironmentName(environmentName: string): Configuration;
    get branchName(): string;
    set branchName(branchName: string);
    getBranchName(): string;
    setBranchName(branchName: string): Configuration;
    get parentBranchName(): string;
    set parentBranchName(parentBranchName: string);
    getParentBranchName(): string;
    setParentBranchName(parentBranchName: string): Configuration;
    get baselineBranchName(): string;
    set baselineBranchName(baselineBranchName: string);
    getBaselineBranchName(): string;
    setBaselineBranchName(baselineBranchName: string): Configuration;
    get compareWithParentBranch(): boolean;
    set compareWithParentBranch(compareWithParentBranch: boolean);
    getCompareWithParentBranch(): boolean;
    setCompareWithParentBranch(compareWithParentBranch: boolean): Configuration;
    get ignoreGitMergeBase(): boolean;
    set ignoreGitMergeBase(ignoreGitMergeBase: boolean);
    getIgnoreGitMergeBase(): boolean;
    setIgnoreGitMergeBase(ignoreGitMergeBase: boolean): Configuration;
    get ignoreBaseline(): boolean;
    set ignoreBaseline(ignoreBaseline: boolean);
    getIgnoreBaseline(): boolean;
    setIgnoreBaseline(ignoreBaseline: boolean): Configuration;
    get saveFailedTests(): boolean;
    set saveFailedTests(saveFailedTests: boolean);
    getSaveFailedTests(): boolean;
    setSaveFailedTests(saveFailedTests: boolean): Configuration;
    get saveNewTests(): boolean;
    set saveNewTests(saveNewTests: boolean);
    getSaveNewTests(): boolean;
    setSaveNewTests(saveNewTests: boolean): Configuration;
    get saveDiffs(): boolean;
    set saveDiffs(saveDiffs: boolean);
    getSaveDiffs(): boolean;
    setSaveDiffs(saveDiffs: boolean): Configuration;
    get sendDom(): boolean;
    set sendDom(sendDom: boolean);
    getSendDom(): boolean;
    setSendDom(sendDom: boolean): Configuration;
    get hostApp(): string;
    set hostApp(hostApp: string);
    getHostApp(): string;
    setHostApp(hostApp: string): Configuration;
    get hostOS(): string;
    set hostOS(hostOS: string);
    getHostOS(): string;
    setHostOS(hostOS: string): Configuration;
    get hostAppInfo(): string;
    set hostAppInfo(hostAppInfo: string);
    getHostAppInfo(): string;
    setHostAppInfo(hostAppInfo: string): Configuration;
    get hostOSInfo(): string;
    set hostOSInfo(hostOSInfo: string);
    getHostOSInfo(): string;
    setHostOSInfo(hostOSInfo: string): Configuration;
    get deviceInfo(): string;
    set deviceInfo(deviceInfo: string);
    getDeviceInfo(): string;
    setDeviceInfo(deviceInfo: string): Configuration;
    get defaultMatchSettings(): ImageMatchSettingsPlain;
    set defaultMatchSettings(defaultMatchSettings: ImageMatchSettingsPlain);
    getDefaultMatchSettings(): ImageMatchSettingsPlain;
    setDefaultMatchSettings(defaultMatchSettings: ImageMatchSettingsPlain): Configuration;
    getMatchLevel(): MatchLevel;
    setMatchLevel(matchLevel: MatchLevelPlain): Configuration;
    getAccessibilityValidation(): AccessibilitySettings;
    setAccessibilityValidation(accessibilityValidation: AccessibilitySettings): Configuration;
    getUseDom(): boolean;
    setUseDom(useDom: boolean): Configuration;
    getEnablePatterns(): boolean;
    setEnablePatterns(enablePatterns: boolean): Configuration;
    getIgnoreDisplacements(): boolean;
    setIgnoreDisplacements(ignoreDisplacements: boolean): Configuration;
    getIgnoreCaret(): boolean;
    setIgnoreCaret(ignoreCaret: boolean): Configuration;
    get forceFullPageScreenshot(): boolean;
    set forceFullPageScreenshot(forceFullPageScreenshot: boolean);
    getForceFullPageScreenshot(): boolean;
    setForceFullPageScreenshot(forceFullPageScreenshot: boolean): Configuration;
    get waitBeforeScreenshots(): number;
    set waitBeforeScreenshots(waitBeforeScreenshots: number);
    getWaitBeforeScreenshots(): number;
    setWaitBeforeScreenshots(waitBeforeScreenshots: number): Configuration;
    get waitBeforeCapture(): number;
    set waitBeforeCapture(waitBeforeCapture: number);
    getWaitBeforeCapture(): number;
    setWaitBeforeCapture(waitBeforeCapture: number): Configuration;
    get stitchMode(): StitchModePlain;
    set stitchMode(stitchMode: StitchModePlain);
    getStitchMode(): StitchMode;
    setStitchMode(stitchMode: StitchModePlain): Configuration;
    get hideScrollbars(): boolean;
    set hideScrollbars(hideScrollbars: boolean);
    getHideScrollbars(): boolean;
    setHideScrollbars(hideScrollbars: boolean): Configuration;
    get hideCaret(): boolean;
    set hideCaret(hideCaret: boolean);
    getHideCaret(): boolean;
    setHideCaret(hideCaret: boolean): Configuration;
    get stitchOverlap(): number;
    set stitchOverlap(stitchOverlap: number);
    getStitchOverlap(): number;
    setStitchOverlap(stitchOverlap: number): Configuration;
    get scrollRootElement(): Element | EyesSelector<Selector>;
    set scrollRootElement(scrollRootElement: Element | EyesSelector<Selector>);
    getScrollRootElement(): Element | EyesSelector<Selector>;
    setScrollRootElement(scrollRootElement: Element | EyesSelector<Selector>): Configuration;
    get cut(): CutProviderPlain;
    set cut(cut: CutProviderPlain);
    getCut(): CutProviderPlain;
    setCut(cut: CutProviderPlain): Configuration;
    get rotation(): ImageRotationPlain;
    set rotation(rotation: ImageRotationPlain);
    getRotation(): ImageRotation;
    setRotation(rotation: ImageRotationPlain | ImageRotation): Configuration;
    get scaleRatio(): number;
    set scaleRatio(scaleRatio: number);
    getScaleRatio(): number;
    setScaleRatio(scaleRatio: number): Configuration;
    get browsersInfo(): Array<DesktopBrowserInfo | ChromeEmulationInfo | IOSDeviceInfo | AndroidDeviceInfo>;
    set browsersInfo(browsersInfo: Array<DesktopBrowserInfo | ChromeEmulationInfo | IOSDeviceInfo | AndroidDeviceInfo>);
    getBrowsersInfo(): Array<DesktopBrowserInfo | ChromeEmulationInfo | { deviceName: DeviceNamePlain; screenOrientation?: undefined | "landscape" | "portrait"; } | IOSDeviceInfo | AndroidDeviceInfo>;
    setBrowsersInfo(browsersInfo: Array<DesktopBrowserInfo | ChromeEmulationInfo | { deviceName: DeviceNamePlain; screenOrientation?: undefined | "landscape" | "portrait"; } | IOSDeviceInfo | AndroidDeviceInfo>): Configuration;
    addBrowsers(...browsersInfo: Array<DesktopBrowserInfo | ChromeEmulationInfo | { deviceName: DeviceNamePlain; screenOrientation?: undefined | "landscape" | "portrait"; } | IOSDeviceInfo | AndroidDeviceInfo>): Configuration;
    addBrowser(browserInfo: DesktopBrowserInfo | ChromeEmulationInfo | { deviceName: DeviceNamePlain; screenOrientation?: undefined | "landscape" | "portrait"; } | IOSDeviceInfo | AndroidDeviceInfo): Configuration;
    addBrowser(width: number, height: number, name?: undefined | "chrome" | "chrome-one-version-back" | "chrome-two-versions-back" | "firefox" | "firefox-one-version-back" | "firefox-two-versions-back" | "ie" | "ie10" | "edge" | "edgechromium" | "edgelegacy" | "edgechromium-one-version-back" | "edgechromium-two-versions-back" | "safari" | "safari-earlyaccess" | "safari-one-version-back" | "safari-two-versions-back"): Configuration;
    addDeviceEmulation(deviceName: DeviceNamePlain, screenOrientation?: undefined | "landscape" | "portrait"): Configuration;
    addMobileDevice(deviceName: AndroidDeviceNamePlain, screenOrientation: ScreenOrientationPlain, version?: undefined | "latest" | "latest-1"): Configuration;
    addMobileDevice(deviceName: IosDeviceNamePlain, screenOrientation: ScreenOrientationPlain, version?: undefined | "latest" | "latest-1"): Configuration;
    get visualGridOptions(): { [key: string]: any; };
    set visualGridOptions(visualGridOptions: { [key: string]: any; });
    getVisualGridOptions(): { [key: string]: any; };
    setVisualGridOptions(visualGridOptions: { [key: string]: any; }): Configuration;
    setVisualGridOption(key: string, value: any): Configuration;
    get layoutBreakpoints(): boolean | Array<number>;
    set layoutBreakpoints(layoutBreakpoints: boolean | Array<number>);
    getLayoutBreakpoints(): boolean | Array<number>;
    setLayoutBreakpoints(layoutBreakpoints: boolean | Array<number>): Configuration;
    get disableBrowserFetching(): boolean;
    set disableBrowserFetching(disableBrowserFetching: boolean);
    getDisableBrowserFetching(): boolean;
    setDisableBrowserFetching(disableBrowserFetching: boolean): Configuration;
}
export type OCRRegion = { target: RegionPlain | Element | EyesSelector<Selector>; hint?: undefined | string; minMatch?: undefined | number; language?: undefined | string; };
export type CheckSettingsAutomationPlain = CheckSettingsImagePlain & {
    frames?: undefined | Array<{ frame: number | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })); scrollRootElement?: undefined | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })); } | (number | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })))>;
    webview?: undefined | string | boolean;
    scrollRootElement?: undefined | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }));
    fully?: undefined | boolean;
    disableBrowserFetching?: undefined | boolean;
    layoutBreakpoints?: undefined | boolean | Array<number>;
    visualGridOptions?: undefined | { [key: string]: any; };
    nmgOptions?: undefined | { [key: string]: any; };
    hooks?: undefined | { beforeCaptureScreenshot: string; };
    renderId?: undefined | string;
    timeout?: undefined | number;
    waitBeforeCapture?: undefined | number;
    lazyLoad?: undefined | boolean | { scrollLength?: undefined | number; waitingTime?: undefined | number; maxAmountToScroll?: undefined | number; };
};
export class CheckSettingsAutomation {
    constructor(settings?: undefined | CheckSettingsAutomation | CheckSettingsAutomationPlain, spec?: undefined | {});
    region(region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))): CheckSettingsAutomation;
    shadow(selector: string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }): CheckSettingsAutomation;
    frame(context: { frame: number | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })); scrollRootElement?: undefined | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })); }): CheckSettingsAutomation;
    frame(frame: number | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })), scrollRootElement?: undefined | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))): CheckSettingsAutomation;
    webview(webview?: undefined | string | boolean): CheckSettingsAutomation;
    scrollRootElement(scrollRootElement: Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })): CheckSettingsAutomation;
    fully(fully?: undefined | boolean): CheckSettingsAutomation;
    disableBrowserFetching(disableBrowserFetching: boolean): CheckSettingsAutomation;
    layoutBreakpoints(layoutBreakpoints?: undefined | boolean | Array<number>): CheckSettingsAutomation;
    hook(name: string, script: string): CheckSettingsAutomation;
    beforeRenderScreenshotHook(script: string): CheckSettingsAutomation;
    ufgOption(key: string, value: any): CheckSettingsAutomation;
    ufgOptions(options: { [key: string]: any; }): CheckSettingsAutomation;
    nmgOption(key: string, value: any): CheckSettingsAutomation;
    nmgOptions(options: { [key: string]: any; }): CheckSettingsAutomation;
    renderId(renderId: string): CheckSettingsAutomation;
    timeout(timeout: number): CheckSettingsAutomation;
    waitBeforeCapture(waitBeforeCapture: number): CheckSettingsAutomation;
    lazyLoad(options?: undefined | boolean | { scrollLength?: undefined | number; waitingTime?: undefined | number; maxAmountToScroll?: undefined | number; }): CheckSettingsAutomation;
    name(name: string): CheckSettingsAutomation;
    withName(name: string): CheckSettingsAutomation;
    ignoreRegion(region: LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))) | { region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })); padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }): CheckSettingsAutomation;
    ignoreRegions(...regions: Array<LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))) | { region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })); padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }>): CheckSettingsAutomation;
    layoutRegion(region: LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))) | { region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })); padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }): CheckSettingsAutomation;
    layoutRegions(...regions: Array<LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))) | { region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })); padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }>): CheckSettingsAutomation;
    strictRegion(region: LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))) | { region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })); padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }): CheckSettingsAutomation;
    strictRegions(...regions: Array<LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))) | { region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })); padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }>): CheckSettingsAutomation;
    contentRegion(region: LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))) | { region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })); padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }): CheckSettingsAutomation;
    contentRegions(...regions: Array<LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))) | { region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })); padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }>): CheckSettingsAutomation;
    floatingRegion(region: {
        region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }));
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        offset?: undefined | { top?: undefined | number; bottom?: undefined | number; left?: undefined | number; right?: undefined | number; };
    }): CheckSettingsAutomation;
    floatingRegion(region: {
        region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }));
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        maxUpOffset?: undefined | number;
        maxDownOffset?: undefined | number;
        maxLeftOffset?: undefined | number;
        maxRightOffset?: undefined | number;
    }): CheckSettingsAutomation;
    floatingRegion(region: LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))), maxUpOffset?: undefined | number, maxDownOffset?: undefined | number, maxLeftOffset?: undefined | number, maxRightOffset?: undefined | number): CheckSettingsAutomation;
    floatingRegions(...regions: Array<LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))) | {
        region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }));
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        offset?: undefined | { top?: undefined | number; bottom?: undefined | number; left?: undefined | number; right?: undefined | number; };
    }>): CheckSettingsAutomation;
    floatingRegions(maxOffset: number, ...regions: Array<LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })))>): CheckSettingsAutomation;
    accessibilityRegion(region: {
        region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }));
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        type?: undefined | "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject";
    }): CheckSettingsAutomation;
    accessibilityRegion(region: LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))), type?: undefined | "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject"): CheckSettingsAutomation;
    accessibilityRegions(...regions: Array<LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }))) | {
        region: RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; }));
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        type?: undefined | "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject";
    }>): CheckSettingsAutomation;
    accessibilityRegions(type: AccessibilityRegionTypePlain, ...regions: Array<LegacyRegionPlain | (RegionPlain | (Element | (string | Selector | { selector: string | Selector; type?: undefined | string; shadow?: undefined | EyesSelector<Selector>; frame?: undefined | EyesSelector<Selector>; })))>): CheckSettingsAutomation;
    matchLevel(matchLevel: MatchLevelPlain): CheckSettingsAutomation;
    layout(): CheckSettingsAutomation;
    exact(): CheckSettingsAutomation;
    strict(): CheckSettingsAutomation;
    ignoreColors(): CheckSettingsAutomation;
    enablePatterns(enablePatterns?: undefined | boolean): CheckSettingsAutomation;
    ignoreDisplacements(ignoreDisplacements?: undefined | boolean): CheckSettingsAutomation;
    ignoreCaret(ignoreCaret?: undefined | boolean): CheckSettingsAutomation;
    useDom(useDom?: undefined | boolean): CheckSettingsAutomation;
    sendDom(sendDom?: undefined | boolean): CheckSettingsAutomation;
    pageId(pageId: string): CheckSettingsAutomation;
    variationGroupId(variationGroupId: string): CheckSettingsAutomation;
}
export class CheckSettings extends CheckSettingsAutomation {
}
export const Target: TargetImage & TargetAutomation<SpecType>;
export class BatchClose {
    static close(settings: { batchIds: Array<string>; serverUrl: string; apiKey: string; proxy?: undefined | ProxySettingsPlain; }): Promise<void>;
    constructor(options?: undefined | { batchIds: Array<string>; serverUrl: string; apiKey: string; proxy?: undefined | ProxySettingsPlain; });
    close(): Promise<void>;
    setBatchIds(batchIds: Array<string>): BatchClose;
    setUrl(serverUrl: string): BatchClose;
    setApiKey(apiKey: string): BatchClose;
    setProxy(proxy: ProxySettingsPlain): BatchClose;
}
export const closeBatch: (options: { batchIds: Array<string>; serverUrl: string; apiKey: string; proxy?: undefined | ProxySettingsPlain; }) => Promise<void>;
export type AccessibilityGuidelinesVersionPlain = "WCAG_2_0" | "WCAG_2_1";
export enum AccessibilityGuidelinesVersion {
    WCAG_2_0 = 'WCAG_2_0',
    WCAG_2_1 = 'WCAG_2_1'
}
export type AccessibilityLevelPlain = "AA" | "AAA";
export enum AccessibilityLevel {
    AA = 'AA',
    AAA = 'AAA'
}
export type AccessibilityRegionTypePlain = "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject";
export enum AccessibilityRegionType {
    IgnoreContrast = 'IgnoreContrast',
    RegularText = 'RegularText',
    LargeText = 'LargeText',
    BoldText = 'BoldText',
    GraphicalObject = 'GraphicalObject'
}
export type AccessibilityStatusPlain = "Passed" | "Failed";
export enum AccessibilityStatus {
    Passed = 'Passed',
    Failed = 'Failed'
}
export type BrowserTypePlain = "chrome" | "chrome-one-version-back" | "chrome-two-versions-back" | "firefox" | "firefox-one-version-back" | "firefox-two-versions-back" | "ie" | "ie10" | "edge" | "edgechromium" | "edgelegacy" | "edgechromium-one-version-back" | "edgechromium-two-versions-back" | "safari" | "safari-earlyaccess" | "safari-one-version-back" | "safari-two-versions-back";
export enum BrowserType {
    CHROME = 'chrome',
    CHROME_ONE_VERSION_BACK = 'chrome-one-version-back',
    CHROME_TWO_VERSIONS_BACK = 'chrome-two-versions-back',
    FIREFOX = 'firefox',
    FIREFOX_ONE_VERSION_BACK = 'firefox-one-version-back',
    FIREFOX_TWO_VERSIONS_BACK = 'firefox-two-versions-back',
    IE_11 = 'ie',
    IE_10 = 'ie10',
    EDGE = 'edge',
    EDGE_CHROMIUM = 'edgechromium',
    EDGE_LEGACY = 'edgelegacy',
    EDGE_CHROMIUM_ONE_VERSION_BACK = 'edgechromium-one-version-back',
    EDGE_CHROMIUM_TWO_VERSIONS_BACK = 'edgechromium-two-versions-back',
    SAFARI = 'safari',
    SAFARI_EARLY_ACCESS = 'safari-earlyaccess',
    SAFARI_ONE_VERSION_BACK = 'safari-one-version-back',
    SAFARI_TWO_VERSIONS_BACK = 'safari-two-versions-back'
}
export type CorsIframeHandlePlain = "BLANK" | "KEEP" | "SNAPSHOT";
export enum CorsIframeHandle {
    BLANK = 'BLANK',
    KEEP = 'KEEP',
    SNAPSHOT = 'SNAPSHOT'
}
export type DeviceNamePlain = "Blackberry PlayBook" | "BlackBerry Z30" | "Galaxy A5" | "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy Note 2" | "Galaxy Note 3" | "Galaxy Note 4" | "Galaxy Note 8" | "Galaxy Note 9" | "Galaxy S3" | "Galaxy S5" | "Galaxy S8" | "Galaxy S8 Plus" | "Galaxy S9" | "Galaxy S9 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "iPad" | "iPad 6th Gen" | "iPad 7th Gen" | "iPad Air 2" | "iPad Mini" | "iPad Pro" | "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone 4" | "iPhone 5/SE" | "iPhone 6/7/8" | "iPhone 6/7/8 Plus" | "iPhone X" | "iPhone XR" | "iPhone XS" | "iPhone XS Max" | "Kindle Fire HDX" | "Laptop with HiDPI screen" | "Laptop with MDPI screen" | "Laptop with touch" | "LG G6" | "LG Optimus L70" | "Microsoft Lumia 550" | "Microsoft Lumia 950" | "Nexus 10" | "Nexus 4" | "Nexus 5" | "Nexus 5X" | "Nexus 6" | "Nexus 6P" | "Nexus 7" | "Nokia Lumia 520" | "Nokia N9" | "OnePlus 7T" | "OnePlus 7T Pro" | "Pixel 2" | "Pixel 2 XL" | "Pixel 3" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Huawei Mate 50 Pro" | "Huawei Matepad 11";
export enum DeviceName {
    Blackberry_PlayBook = 'Blackberry PlayBook',
    BlackBerry_Z30 = 'BlackBerry Z30',
    Galaxy_A5 = 'Galaxy A5',
    Galaxy_Note_10 = 'Galaxy Note 10',
    Galaxy_Note_10_Plus = 'Galaxy Note 10 Plus',
    Galaxy_Note_2 = 'Galaxy Note 2',
    Galaxy_Note_3 = 'Galaxy Note 3',
    Galaxy_Note_4 = 'Galaxy Note 4',
    Galaxy_Note_8 = 'Galaxy Note 8',
    Galaxy_Note_9 = 'Galaxy Note 9',
    Galaxy_S3 = 'Galaxy S3',
    Galaxy_S5 = 'Galaxy S5',
    Galaxy_S8 = 'Galaxy S8',
    Galaxy_S8_Plus = 'Galaxy S8 Plus',
    Galaxy_S9 = 'Galaxy S9',
    Galaxy_S9_Plus = 'Galaxy S9 Plus',
    Galaxy_S10 = 'Galaxy S10',
    Galaxy_S10_Plus = 'Galaxy S10 Plus',
    Galaxy_S20 = 'Galaxy S20',
    Galaxy_S22 = 'Galaxy S22',
    Galaxy_Tab_S7 = 'Galaxy Tab S7',
    iPad = 'iPad',
    iPad_6th_Gen = 'iPad 6th Gen',
    iPad_7th_Gen = 'iPad 7th Gen',
    iPad_Air_2 = 'iPad Air 2',
    iPad_Mini = 'iPad Mini',
    iPad_Pro = 'iPad Pro',
    iPhone_11 = 'iPhone 11',
    iPhone_11_Pro = 'iPhone 11 Pro',
    iPhone_11_Pro_Max = 'iPhone 11 Pro Max',
    iPhone_4 = 'iPhone 4',
    iPhone_5SE = 'iPhone 5/SE',
    iPhone_6_7_8 = 'iPhone 6/7/8',
    iPhone_6_7_8_Plus = 'iPhone 6/7/8 Plus',
    iPhone_X = 'iPhone X',
    iPhone_XR = 'iPhone XR',
    iPhone_XS = 'iPhone XS',
    iPhone_XS_Max = 'iPhone XS Max',
    Kindle_Fire_HDX = 'Kindle Fire HDX',
    Laptop_with_HiDPI_screen = 'Laptop with HiDPI screen',
    Laptop_with_MDPI_screen = 'Laptop with MDPI screen',
    Laptop_with_touch = 'Laptop with touch',
    LG_G6 = 'LG G6',
    LG_Optimus_L70 = 'LG Optimus L70',
    Microsoft_Lumia_550 = 'Microsoft Lumia 550',
    Microsoft_Lumia_950 = 'Microsoft Lumia 950',
    Nexus_10 = 'Nexus 10',
    Nexus_4 = 'Nexus 4',
    Nexus_5 = 'Nexus 5',
    Nexus_5X = 'Nexus 5X',
    Nexus_6 = 'Nexus 6',
    Nexus_6P = 'Nexus 6P',
    Nexus_7 = 'Nexus 7',
    Nokia_Lumia_520 = 'Nokia Lumia 520',
    Nokia_N9 = 'Nokia N9',
    OnePlus_7T = 'OnePlus 7T',
    OnePlus_7T_Pro = 'OnePlus 7T Pro',
    Pixel_2 = 'Pixel 2',
    Pixel_2_XL = 'Pixel 2 XL',
    Pixel_3 = 'Pixel 3',
    Pixel_3_XL = 'Pixel 3 XL',
    Pixel_4 = 'Pixel 4',
    Pixel_4_XL = 'Pixel 4 XL',
    Pixel_5 = 'Pixel 5',
    Sony_Xperia_10_II = 'Sony Xperia 10 II',
    Huawei_Mate_50_Pro = 'Huawei Mate 50 Pro',
    Huawei_Matepad_11 = 'Huawei Matepad 11'
}
export type FailureReportPlain = "IMMEDIATE" | "ON_CLOSE";
export enum FailureReport {
    IMMEDIATE = 'IMMEDIATE',
    ON_CLOSE = 'ON_CLOSE'
}
export type IosDeviceNamePlain = "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone X" | "iPhone XR" | "iPhone 14 Pro Max" | "iPhone 14" | "iPhone 13 Pro Max" | "iPhone 13 Pro" | "iPhone 13" | "iPhone 12 Pro Max" | "iPhone 12 Pro" | "iPhone 12" | "iPhone 12 mini" | "iPhone Xs" | "iPhone 8" | "iPhone 8 Plus" | "iPhone 7" | "iPhone SE (1st generation)" | "iPad Pro (12.9-inch) (3rd generation)" | "iPad Pro (11-inch) (4th generation)" | "iPad (7th generation)" | "iPad (9th generation)" | "iPad Air (2nd generation)" | "iPad Air (4th generation)";
export enum IosDeviceName {
    iPhone_14_Pro_Max = 'iPhone 14 Pro Max',
    iPhone_14 = 'iPhone 14',
    iPhone_13_Pro_Max = 'iPhone 13 Pro Max',
    iPhone_13_Pro = 'iPhone 13 Pro',
    iPhone_13 = 'iPhone 13',
    iPhone_12_Pro_Max = 'iPhone 12 Pro Max',
    iPhone_12_Pro = 'iPhone 12 Pro',
    iPhone_12 = 'iPhone 12',
    iPhone_12_mini = 'iPhone 12 mini',
    iPhone_11_Pro = 'iPhone 11 Pro',
    iPhone_11_Pro_Max = 'iPhone 11 Pro Max',
    iPhone_11 = 'iPhone 11',
    iPhone_XR = 'iPhone XR',
    iPhone_XS = 'iPhone Xs',
    iPhone_X = 'iPhone X',
    iPhone_8 = 'iPhone 8',
    iPhone_8_Plus = 'iPhone 8 Plus',
    iPhone_7 = 'iPhone 7',
    iPhone_SE = 'iPhone SE (1st generation)',
    iPad_Pro_3 = 'iPad Pro (12.9-inch) (3rd generation)',
    iPad_Pro_4 = 'iPad Pro (11-inch) (4th generation)',
    iPad_7 = 'iPad (7th generation)',
    iPad_9 = 'iPad (9th generation)',
    iPad_Air_2 = 'iPad Air (2nd generation)',
    iPad_Air_4 = 'iPad Air (4th generation)'
}
export type IosVersionPlain = "latest" | "latest-1";
export enum IosVersion {
    LATEST = 'latest',
    ONE_VERSION_BACK = 'latest-1',
    LATEST_ONE_VERSION_BACK = 'latest-1'
}
export type AndroidDeviceNamePlain = "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Pixel 6" | "Galaxy S20 Plus" | "Galaxy S21" | "Galaxy S21 Plus" | "Galaxy S21 Ultra" | "Galaxy S22 Plus" | "Galaxy Tab S8" | "Xiaomi Redmi Note 10 JE" | "Xiaomi Redmi Note 11" | "Xiaomi Redmi Note 11 Pro" | "Sony Xperia 1 II" | "Sony Xperia Ace II" | "Huawei P30 Lite";
export enum AndroidDeviceName {
    Pixel_3_XL = 'Pixel 3 XL',
    Pixel_4 = 'Pixel 4',
    Pixel_4_XL = 'Pixel 4 XL',
    Pixel_5 = 'Pixel 5',
    Pixel_6 = 'Pixel 6',
    Galaxy_S10 = 'Galaxy S10',
    Galaxy_S10_Plus = 'Galaxy S10 Plus',
    Galaxy_Note_10 = 'Galaxy Note 10',
    Galaxy_Note_10_Plus = 'Galaxy Note 10 Plus',
    Galaxy_S20 = 'Galaxy S20',
    Galaxy_S20_Plus = 'Galaxy S20 Plus',
    Galaxy_S21 = 'Galaxy S21',
    Galaxy_S21_Plus = 'Galaxy S21 Plus',
    Galaxy_S21_Ultra = 'Galaxy S21 Ultra',
    Galaxy_S22 = 'Galaxy S22',
    Galaxy_S22_Plus = 'Galaxy S22 Plus',
    Galaxy_Tab_S7 = 'Galaxy Tab S7',
    Galaxy_Tab_S8 = 'Galaxy Tab S8',
    Xiaomi_Redmi_Note_10_JE = 'Xiaomi Redmi Note 10 JE',
    Xiaomi_Redmi_Note_11 = 'Xiaomi Redmi Note 11',
    Xiaomi_Redmi_Note_11_Pro = 'Xiaomi Redmi Note 11 Pro',
    Sony_Xperia_1_II = 'Sony Xperia 1 II',
    Sony_Xperia_10_II = 'Sony Xperia 10 II',
    Sony_Xperia_Ace_II = 'Sony Xperia Ace II',
    Huawei_P30_Lite = 'Huawei P30 Lite'
}
export type AndroidVersionPlain = "latest" | "latest-1";
export enum AndroidVersion {
    LATEST = 'latest',
    ONE_VERSION_BACK = 'latest-1'
}
export type MatchLevelPlain = "None" | "Layout" | "Layout1" | "Layout2" | "Content" | "IgnoreColors" | "Strict" | "Exact";
export enum MatchLevel {
    None = 'None',
    LegacyLayout = 'Layout1',
    Layout = 'Layout',
    Layout2 = 'Layout2',
    Content = 'Content',
    IgnoreColors = 'IgnoreColors',
    Strict = 'Strict',
    Exact = 'Exact'
}
export type ScreenOrientationPlain = "landscape" | "portrait";
export enum ScreenOrientation {
    PORTRAIT = 'portrait',
    LANDSCAPE = 'landscape'
}
export type SessionTypePlain = "SEQUENTIAL" | "PROGRESSION";
export enum SessionType {
    SEQUENTIAL = 'SEQUENTIAL',
    PROGRESSION = 'PROGRESSION'
}
export type StitchModePlain = "Scroll" | "CSS";
export enum StitchMode {
    SCROLL = 'Scroll',
    CSS = 'CSS'
}
export type TestResultsStatusPlain = "Passed" | "Unresolved" | "Failed";
export enum TestResultsStatus {
    Passed = 'Passed',
    Unresolved = 'Unresolved',
    Failed = 'Failed'
}
export class EyesError extends Error {
}
export class TestFailedError extends EyesError {
    constructor(message: string, results: TestResultsPlain);
    constructor(results: TestResultsPlain);
    get testResults(): TestResultsPlain;
    getTestResults(): TestResults;
}
export class DiffsFoundError extends TestFailedError {
    constructor(message: string, results?: undefined | TestResultsPlain);
    constructor(results: TestResultsPlain);
}
export class NewTestError extends TestFailedError {
    constructor(message: string, results?: undefined | TestResultsPlain);
    constructor(results: TestResultsPlain);
}
export type AccessibilityMatchSettingsPlain = { region: RegionPlain; type?: undefined | "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject"; };
export class AccessibilityMatchSettings implements Required<AccessibilityMatchSettingsPlain> {
    constructor(settings: AccessibilityMatchSettingsPlain);
    constructor(region: RegionPlain);
    constructor(x: number, y: number, width: number, height: number, type?: undefined | "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject");
    get region(): RegionPlain;
    set region(region: RegionPlain);
    getRegion(): Region;
    setRegion(region: RegionPlain): void;
    getLeft(): number;
    setLeft(left: number): void;
    getTop(): number;
    setTop(top: number): void;
    getWidth(): number;
    setWidth(width: number): void;
    getHeight(): number;
    setHeight(height: number): void;
    get type(): AccessibilityRegionTypePlain;
    set type(type: AccessibilityRegionTypePlain);
    getType(): AccessibilityRegionType;
    setType(type: AccessibilityRegionTypePlain): void;
}
export type AccessibilitySettings = { level?: undefined | "AA" | "AAA"; guidelinesVersion?: undefined | "WCAG_2_0" | "WCAG_2_1"; };
export type BatchInfoPlain = {
    id?: undefined | string;
    name?: undefined | string;
    sequenceName?: undefined | string;
    startedAt?: undefined | string | Date;
    notifyOnCompletion?: undefined | boolean;
    properties?: undefined | Array<PropertyDataPlain>;
};
export class BatchInfo implements Required<BatchInfoPlain> {
    constructor();
    constructor(batch?: undefined | BatchInfoPlain);
    constructor(name?: undefined | string, startedAt?: undefined | string | Date, id?: undefined | string);
    get id(): string;
    set id(id: string);
    getId(): string;
    setId(id: string): BatchInfo;
    get name(): string;
    set name(name: string);
    getName(): string;
    setName(name: string): BatchInfo;
    get sequenceName(): string;
    set sequenceName(sequenceName: string);
    getSequenceName(): string;
    setSequenceName(sequenceName: string): BatchInfo;
    get startedAt(): string | Date;
    set startedAt(startedAt: string | Date);
    getStartedAt(): string | Date;
    setStartedAt(startedAt: string | Date): BatchInfo;
    get notifyOnCompletion(): boolean;
    set notifyOnCompletion(notifyOnCompletion: boolean);
    getNotifyOnCompletion(): boolean;
    setNotifyOnCompletion(notifyOnCompletion: boolean): BatchInfo;
    get properties(): Array<PropertyDataPlain>;
    set properties(properties: Array<PropertyDataPlain>);
    getProperties(): Array<PropertyData>;
    setProperties(properties: Array<PropertyDataPlain>): BatchInfo;
    addProperty(name: string, value: string): BatchInfo;
    addProperty(prop: PropertyDataPlain): BatchInfo;
}
export type CheckSettingsImagePlain = {
    name?: undefined | string;
    region?: undefined | RegionPlain;
    matchLevel?: undefined | "None" | "Layout" | "Layout1" | "Layout2" | "Content" | "IgnoreColors" | "Strict" | "Exact";
    useDom?: undefined | boolean;
    sendDom?: undefined | boolean;
    enablePatterns?: undefined | boolean;
    ignoreDisplacements?: undefined | boolean;
    ignoreMismatch?: undefined | boolean;
    ignoreCaret?: undefined | boolean;
    ignoreRegions?: undefined | Array<RegionPlain | { region: RegionPlain; padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }>;
    layoutRegions?: undefined | Array<RegionPlain | { region: RegionPlain; padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }>;
    strictRegions?: undefined | Array<RegionPlain | { region: RegionPlain; padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }>;
    contentRegions?: undefined | Array<RegionPlain | { region: RegionPlain; padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }>;
    floatingRegions?: undefined | Array<RegionPlain | {
        region: RegionPlain;
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        offset?: undefined | { top?: undefined | number; bottom?: undefined | number; left?: undefined | number; right?: undefined | number; };
    } | {
        region: RegionPlain;
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        maxUpOffset?: undefined | number;
        maxDownOffset?: undefined | number;
        maxLeftOffset?: undefined | number;
        maxRightOffset?: undefined | number;
    }>;
    accessibilityRegions?: undefined | Array<RegionPlain | {
        region: RegionPlain;
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        type?: undefined | "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject";
    }>;
    pageId?: undefined | string;
    variationGroupId?: undefined | string;
};
export class CheckSettingsImage {
    constructor(settings?: undefined | CheckSettingsImagePlain | CheckSettingsImage, target?: undefined | {
        image: string | URL | Buffer;
        name?: undefined | string;
        dom?: undefined | string;
        locationInViewport?: undefined | LocationPlain;
        locationInView?: undefined | LocationPlain;
        fullViewSize?: undefined | RectangleSizePlain;
    });
    image(image: string | URL | Buffer): CheckSettingsImage;
    buffer(imageBuffer: Buffer): CheckSettingsImage;
    base64(imageBase64: Buffer): CheckSettingsImage;
    path(imagePath: string): CheckSettingsImage;
    url(imageUrl: string | URL): CheckSettingsImage;
    name(name: string): CheckSettingsImage;
    withDom(dom: string): CheckSettingsImage;
    withLocation(locationInViewport: LocationPlain): CheckSettingsImage;
    region(region: LegacyRegionPlain | RegionPlain): CheckSettingsImage;
    withName(name: string): CheckSettingsImage;
    ignoreRegion(region: LegacyRegionPlain | RegionPlain | { region: RegionPlain; padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }): CheckSettingsImage;
    ignoreRegions(...regions: Array<LegacyRegionPlain | RegionPlain | { region: RegionPlain; padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }>): CheckSettingsImage;
    layoutRegion(region: LegacyRegionPlain | RegionPlain | { region: RegionPlain; padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }): CheckSettingsImage;
    layoutRegions(...regions: Array<LegacyRegionPlain | RegionPlain | { region: RegionPlain; padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }>): CheckSettingsImage;
    strictRegion(region: LegacyRegionPlain | RegionPlain | { region: RegionPlain; padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }): CheckSettingsImage;
    strictRegions(...regions: Array<LegacyRegionPlain | RegionPlain | { region: RegionPlain; padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }>): CheckSettingsImage;
    contentRegion(region: LegacyRegionPlain | RegionPlain | { region: RegionPlain; padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }): CheckSettingsImage;
    contentRegions(...regions: Array<LegacyRegionPlain | RegionPlain | { region: RegionPlain; padding?: undefined | number | { top: number; bottom: number; left: number; right: number; }; regionId?: undefined | string; }>): CheckSettingsImage;
    floatingRegion(region: {
        region: RegionPlain;
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        offset?: undefined | { top?: undefined | number; bottom?: undefined | number; left?: undefined | number; right?: undefined | number; };
    }): CheckSettingsImage;
    floatingRegion(region: {
        region: RegionPlain;
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        maxUpOffset?: undefined | number;
        maxDownOffset?: undefined | number;
        maxLeftOffset?: undefined | number;
        maxRightOffset?: undefined | number;
    }): CheckSettingsImage;
    floatingRegion(region: LegacyRegionPlain | RegionPlain, maxUpOffset?: undefined | number, maxDownOffset?: undefined | number, maxLeftOffset?: undefined | number, maxRightOffset?: undefined | number): CheckSettingsImage;
    floatingRegions(...regions: Array<LegacyRegionPlain | RegionPlain | {
        region: RegionPlain;
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        offset?: undefined | { top?: undefined | number; bottom?: undefined | number; left?: undefined | number; right?: undefined | number; };
    }>): CheckSettingsImage;
    floatingRegions(maxOffset: number, ...regions: Array<LegacyRegionPlain | RegionPlain>): CheckSettingsImage;
    accessibilityRegion(region: {
        region: RegionPlain;
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        type?: undefined | "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject";
    }): CheckSettingsImage;
    accessibilityRegion(region: LegacyRegionPlain | RegionPlain, type?: undefined | "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject"): CheckSettingsImage;
    accessibilityRegions(...regions: Array<LegacyRegionPlain | RegionPlain | {
        region: RegionPlain;
        padding?: undefined | number | { top: number; bottom: number; left: number; right: number; };
        regionId?: undefined | string;
        type?: undefined | "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject";
    }>): CheckSettingsImage;
    accessibilityRegions(type: AccessibilityRegionTypePlain, ...regions: Array<LegacyRegionPlain | RegionPlain>): CheckSettingsImage;
    matchLevel(matchLevel: MatchLevelPlain): CheckSettingsImage;
    layout(): CheckSettingsImage;
    exact(): CheckSettingsImage;
    strict(): CheckSettingsImage;
    ignoreColors(): CheckSettingsImage;
    enablePatterns(enablePatterns?: undefined | boolean): CheckSettingsImage;
    ignoreDisplacements(ignoreDisplacements?: undefined | boolean): CheckSettingsImage;
    ignoreCaret(ignoreCaret?: undefined | boolean): CheckSettingsImage;
    useDom(useDom?: undefined | boolean): CheckSettingsImage;
    sendDom(sendDom?: undefined | boolean): CheckSettingsImage;
    pageId(pageId: string): CheckSettingsImage;
    variationGroupId(variationGroupId: string): CheckSettingsImage;
}
export type TargetImage = {
    image(image: string | URL | Buffer): CheckSettingsImage;
    buffer(imageBuffer: Buffer): CheckSettingsImage;
    base64(imageBase64: string): CheckSettingsImage;
    path(imagePath: string): CheckSettingsImage;
    url(imageUrl: string | URL): CheckSettingsImage;
};
export type TargetAutomation<TSpec extends SpecType = SpecType> = {
    window(): CheckSettingsAutomation;
    region(region: LegacyRegionPlain | (RegionPlain | (TSpec["element"] | (string | TSpec["selector"] | { selector: string | TSpec["selector"]; type?: undefined | string; shadow?: undefined | EyesSelector<TSpec["selector"]>; frame?: undefined | EyesSelector<TSpec["selector"]>; })))): CheckSettingsAutomation;
    frame(context: { frame: number | (TSpec["element"] | (string | TSpec["selector"] | { selector: string | TSpec["selector"]; type?: undefined | string; shadow?: undefined | EyesSelector<TSpec["selector"]>; frame?: undefined | EyesSelector<TSpec["selector"]>; })); scrollRootElement?: undefined | (TSpec["element"] | (string | TSpec["selector"] | { selector: string | TSpec["selector"]; type?: undefined | string; shadow?: undefined | EyesSelector<TSpec["selector"]>; frame?: undefined | EyesSelector<TSpec["selector"]>; })); }): CheckSettingsAutomation;
    frame(frame: number | (TSpec["element"] | (string | TSpec["selector"] | { selector: string | TSpec["selector"]; type?: undefined | string; shadow?: undefined | EyesSelector<TSpec["selector"]>; frame?: undefined | EyesSelector<TSpec["selector"]>; })), scrollRootElement?: undefined | (TSpec["element"] | (string | TSpec["selector"] | { selector: string | TSpec["selector"]; type?: undefined | string; shadow?: undefined | EyesSelector<TSpec["selector"]>; frame?: undefined | EyesSelector<TSpec["selector"]>; }))): CheckSettingsAutomation;
    shadow(selector: string | TSpec["selector"] | { selector: string | TSpec["selector"]; type?: undefined | string; shadow?: undefined | EyesSelector<TSpec["selector"]>; frame?: undefined | EyesSelector<TSpec["selector"]>; }): CheckSettingsAutomation;
    webview(webview?: undefined | string | boolean): CheckSettingsAutomation;
};
export type CutProviderPlain = { top: number; right: number; bottom: number; left: number; } | { x: number; y: number; width: number; height: number; };
export class CutProvider implements Required<{
    x: number;
    y: number;
    width: number;
    height: number;
    top: number;
    right: number;
    bottom: number;
    left: number;
}> {
    constructor(rectOrRegion: CutProviderPlain);
    constructor(top: number, bottom: number, left: number, right: number);
    get top(): number;
    get right(): number;
    get bottom(): number;
    get left(): number;
    get width(): number;
    get height(): number;
    get x(): number;
    get y(): number;
    scale(scaleRatio: number): CutProvider;
}
export class FixedCutProvider extends CutProvider {
}
export class UnscaledFixedCutProvider extends CutProvider {
    scale(): UnscaledFixedCutProvider;
}
export type ExactMatchSettingsPlain = { minDiffIntensity: number; minDiffWidth: number; minDiffHeight: number; matchThreshold: number; };
export class ExactMatchSettings implements Required<ExactMatchSettingsPlain> {
    constructor(settings: ExactMatchSettingsPlain);
    get minDiffIntensity(): number;
    set minDiffIntensity(minDiffIntensity: number);
    getMinDiffIntensity(): number;
    setMinDiffIntensity(value: number): void;
    get minDiffWidth(): number;
    set minDiffWidth(minDiffWidth: number);
    getMinDiffWidth(): number;
    setMinDiffWidth(value: number): void;
    get minDiffHeight(): number;
    set minDiffHeight(minDiffHeight: number);
    getMinDiffHeight(): number;
    setMinDiffHeight(value: number): void;
    get matchThreshold(): number;
    set matchThreshold(matchThreshold: number);
    getMatchThreshold(): number;
    setMatchThreshold(value: number): void;
}
export type FloatingMatchSettingsPlain = {
    region: RegionPlain;
    maxUpOffset?: undefined | number;
    maxDownOffset?: undefined | number;
    maxLeftOffset?: undefined | number;
    maxRightOffset?: undefined | number;
};
export class FloatingMatchSettings implements Required<FloatingMatchSettingsPlain> {
    constructor(settings: FloatingMatchSettingsPlain);
    constructor(region: RegionPlain);
    constructor(x: number, y: number, width: number, height: number, maxUpOffset?: undefined | number, maxDownOffset?: undefined | number, maxLeftOffset?: undefined | number, maxRightOffset?: undefined | number);
    get region(): RegionPlain;
    set region(region: RegionPlain);
    getRegion(): Region;
    setRegion(region: RegionPlain): void;
    getLeft(): number;
    setLeft(left: number): void;
    getTop(): number;
    setTop(top: number): void;
    getWidth(): number;
    setWidth(width: number): void;
    getHeight(): number;
    setHeight(height: number): void;
    get maxUpOffset(): number;
    set maxUpOffset(maxUpOffset: number);
    getMaxUpOffset(): number;
    setMaxUpOffset(maxUpOffset: number): void;
    get maxDownOffset(): number;
    set maxDownOffset(maxDownOffset: number);
    getMaxDownOffset(): number;
    setMaxDownOffset(maxDownOffset: number): void;
    get maxLeftOffset(): number;
    set maxLeftOffset(maxLeftOffset: number);
    getMaxLeftOffset(): number;
    setMaxLeftOffset(maxLeftOffset: number): void;
    get maxRightOffset(): number;
    set maxRightOffset(maxRightOffset: number);
    getMaxRightOffset(): number;
    setMaxRightOffset(maxRightOffset: number): void;
}
export type ImageMatchSettingsPlain = {
    exact?: undefined | ExactMatchSettingsPlain;
    matchLevel?: undefined | "None" | "Layout" | "Layout1" | "Layout2" | "Content" | "IgnoreColors" | "Strict" | "Exact";
    ignoreCaret?: undefined | boolean;
    useDom?: undefined | boolean;
    enablePatterns?: undefined | boolean;
    ignoreDisplacements?: undefined | boolean;
    ignoreRegions?: undefined | Array<RegionPlain>;
    layoutRegions?: undefined | Array<RegionPlain>;
    strictRegions?: undefined | Array<RegionPlain>;
    contentRegions?: undefined | Array<RegionPlain>;
    floatingRegions?: undefined | Array<RegionPlain | FloatingMatchSettingsPlain>;
    accessibilityRegions?: undefined | Array<RegionPlain | AccessibilityMatchSettingsPlain>;
    accessibilitySettings?: undefined | AccessibilitySettings;
};
export class ImageMatchSettings implements Required<ImageMatchSettingsPlain> {
    constructor(settings?: undefined | ImageMatchSettingsPlain);
    get exact(): ExactMatchSettingsPlain;
    set exact(exact: ExactMatchSettingsPlain);
    getExact(): ExactMatchSettings;
    setExact(exact: ExactMatchSettingsPlain): void;
    get matchLevel(): MatchLevelPlain;
    set matchLevel(matchLevel: MatchLevelPlain);
    getMatchLevel(): MatchLevel;
    setMatchLevel(matchLevel: MatchLevelPlain): void;
    get ignoreCaret(): boolean;
    set ignoreCaret(ignoreCaret: boolean);
    getIgnoreCaret(): boolean;
    setIgnoreCaret(ignoreCaret: boolean): void;
    get useDom(): boolean;
    set useDom(useDom: boolean);
    getUseDom(): boolean;
    setUseDom(useDom: boolean): void;
    get enablePatterns(): boolean;
    set enablePatterns(enablePatterns: boolean);
    getEnablePatterns(): boolean;
    setEnablePatterns(enablePatterns: boolean): void;
    get ignoreDisplacements(): boolean;
    set ignoreDisplacements(ignoreDisplacements: boolean);
    getIgnoreDisplacements(): boolean;
    setIgnoreDisplacements(ignoreDisplacements: boolean): void;
    get ignoreRegions(): Array<RegionPlain>;
    set ignoreRegions(ignoreRegions: Array<RegionPlain>);
    getIgnoreRegions(): Array<Region>;
    setIgnoreRegions(ignoreRegions: Array<RegionPlain>): void;
    get layoutRegions(): Array<RegionPlain>;
    set layoutRegions(layoutRegions: Array<RegionPlain>);
    get layout(): Array<RegionPlain>;
    set layout(layout: Array<RegionPlain>);
    getLayoutRegions(): Array<Region>;
    setLayoutRegions(layoutRegions: Array<RegionPlain>): void;
    get strictRegions(): Array<RegionPlain>;
    set strictRegions(strictRegions: Array<RegionPlain>);
    get strict(): Array<RegionPlain>;
    set strict(strict: Array<RegionPlain>);
    getStrictRegions(): Array<Region>;
    setStrictRegions(strictRegions: Array<RegionPlain>): void;
    get contentRegions(): Array<RegionPlain>;
    set contentRegions(contentRegions: Array<RegionPlain>);
    get content(): Array<RegionPlain>;
    set content(content: Array<RegionPlain>);
    getContentRegions(): Array<Region>;
    setContentRegions(contentRegions: Array<RegionPlain>): void;
    get floatingRegions(): Array<RegionPlain | FloatingMatchSettingsPlain>;
    set floatingRegions(floatingRegions: Array<RegionPlain | FloatingMatchSettingsPlain>);
    get floating(): Array<RegionPlain | FloatingMatchSettingsPlain>;
    set floating(floating: Array<RegionPlain | FloatingMatchSettingsPlain>);
    getFloatingRegions(): Array<FloatingMatchSettings>;
    setFloatingRegions(floatingRegions: Array<FloatingMatchSettingsPlain>): void;
    get accessibilityRegions(): Array<RegionPlain | AccessibilityMatchSettingsPlain>;
    set accessibilityRegions(accessibilityRegions: Array<RegionPlain | AccessibilityMatchSettingsPlain>);
    get accessibility(): Array<RegionPlain | AccessibilityMatchSettingsPlain>;
    set accessibility(accessibility: Array<RegionPlain | AccessibilityMatchSettingsPlain>);
    getAccessibilityRegions(): Array<AccessibilityMatchSettings>;
    setAccessibilityRegions(accessibilityRegions: Array<AccessibilityMatchSettingsPlain>): void;
    get accessibilitySettings(): AccessibilitySettings;
    set accessibilitySettings(accessibilitySettings: AccessibilitySettings);
    getAccessibilitySettings(): AccessibilitySettings;
    setAccessibilitySettings(accessibilitySettings: AccessibilitySettings): void;
}
export type ImageRotationPlain = 0 | 270 | -270 | 180 | -180 | 90 | -90;
export class ImageRotation {
    constructor(rotation: ImageRotationPlain);
    get rotation(): ImageRotationPlain;
    set rotation(rotation: ImageRotationPlain);
    getRotation(): ImageRotationPlain;
    setRotation(rotation: ImageRotationPlain): void;
}
export type LocationPlain = { x: number; y: number; };
export class Location implements Required<LocationPlain> {
    constructor(location: LocationPlain);
    constructor(x: number, y: number);
    get x(): number;
    set x(x: number);
    getX(): number;
    setX(x: number): void;
    get y(): number;
    set y(y: number);
    getY(): number;
    setY(y: number): void;
}
export type LogHandlerPlain = CustomLogHandlerPlain | ConsoleLogHandlerPlain | FileLogHandlerPlain;
export type CustomLogHandlerPlain = { log(message: any): void; };
export type FileLogHandlerPlain = { type: "file"; filename?: undefined | string; append?: undefined | boolean; };
export type ConsoleLogHandlerPlain = { type: "console"; };
export abstract class LogHandler implements CustomLogHandlerPlain {
    constructor(verbose?: undefined | boolean);
    get verbose(): boolean;
    set verbose(verbose: boolean);
    getIsVerbose(): boolean;
    setIsVerbose(verbose: boolean): void;
    log(message: string): void;
    abstract onMessage(message: string): void;
    abstract open(): void;
    abstract close(): void;
}
export class FileLogHandler extends LogHandler implements FileLogHandlerPlain {
    constructor(verbose?: undefined | boolean, filename?: undefined | string, append?: undefined | boolean);
    readonly type: "file";
    readonly filename: string;
    readonly append: boolean;
    onMessage(): void;
    open(): void;
    close(): void;
}
export class ConsoleLogHandler extends LogHandler implements ConsoleLogHandlerPlain {
    readonly type: "console";
    onMessage(): void;
    open(): void;
    close(): void;
}
export class NullLogHandler extends LogHandler {
    onMessage(): void;
    open(): void;
    close(): void;
}
export type OCRSettings<TPattern extends string = string> = { patterns: Array<TPattern>; ignoreCase?: undefined | boolean; firstOnly?: undefined | boolean; language?: undefined | string; };
export type PropertyDataPlain = { name: string; value: string; };
export class PropertyData implements Required<PropertyDataPlain> {
    constructor(property: PropertyDataPlain);
    constructor(name: string, value: string);
    get name(): string;
    set name(name: string);
    getName(): string;
    setName(name: string): void;
    get value(): string;
    set value(value: string);
    getValue(): string;
    setValue(value: string): void;
}
export type ProxySettingsPlain = { url: string; username?: undefined | string; password?: undefined | string; };
export class ProxySettings implements Required<ProxySettingsPlain> {
    constructor(proxy: ProxySettingsPlain);
    constructor(url: string, username?: undefined | string, password?: undefined | string, deprecatedIsHttpOnly?: undefined | boolean);
    get url(): string;
    getUri(): string;
    getUrl(): string;
    get username(): string;
    getUsername(): string;
    get password(): string;
    getPassword(): string;
    get isHttpOnly(): boolean;
    getIsHttpOnly(): boolean;
}
export type RectangleSizePlain = { width: number; height: number; };
export class RectangleSize implements Required<RectangleSizePlain> {
    constructor(size: RectangleSizePlain);
    constructor(width: number, height: number);
    get width(): number;
    set width(width: number);
    getWidth(): number;
    setWidth(width: number): void;
    get height(): number;
    set height(height: number);
    getHeight(): number;
    setHeight(height: number): void;
}
export type RegionPlain = LocationPlain & RectangleSizePlain;
export type LegacyRegionPlain = { left: number; top: number; width: number; height: number; };
export class Region implements Required<RegionPlain> {
    constructor(region: RegionPlain);
    constructor(location: LocationPlain, size: RectangleSizePlain);
    constructor(x: number, y: number, width: number, height: number);
    get x(): number;
    set x(x: number);
    get left(): number;
    set left(left: number);
    getX(): number;
    setX(x: number): void;
    getLeft(): number;
    setLeft(left: number): void;
    get y(): number;
    set y(y: number);
    get top(): number;
    set top(top: number);
    getY(): number;
    setY(y: number): void;
    getTop(): number;
    setTop(top: number): void;
    get width(): number;
    set width(width: number);
    getWidth(): number;
    setWidth(width: number): void;
    get height(): number;
    set height(height: number);
    getHeight(): number;
    setHeight(height: number): void;
}
export type DesktopBrowserInfo = { name?: undefined | "chrome" | "chrome-one-version-back" | "chrome-two-versions-back" | "firefox" | "firefox-one-version-back" | "firefox-two-versions-back" | "ie" | "ie10" | "edge" | "edgechromium" | "edgelegacy" | "edgechromium-one-version-back" | "edgechromium-two-versions-back" | "safari" | "safari-earlyaccess" | "safari-one-version-back" | "safari-two-versions-back"; width: number; height: number; };
export type ChromeEmulationInfo = { chromeEmulationInfo: { deviceName: DeviceNamePlain; screenOrientation?: undefined | "landscape" | "portrait"; }; };
export type IOSDeviceInfo = { iosDeviceInfo: { deviceName: IosDeviceNamePlain; iosVersion?: undefined | "latest" | "latest-1"; screenOrientation?: undefined | "landscape" | "portrait"; }; };
export type AndroidDeviceInfo = { androidDeviceInfo: { deviceName: AndroidDeviceNamePlain; version?: undefined | "latest" | "latest-1"; screenOrientation?: undefined | "landscape" | "portrait"; }; };
export type RunnerOptionsPlain = { testConcurrency?: undefined | number; };
export class RunnerOptionsFluent {
    testConcurrency(concurrency: number): RunnerOptionsFluent;
}
export function RunnerOptions(): RunnerOptionsFluent;
export type VisualLocatorSettings<TLocator extends string = string> = { locatorNames: Array<TLocator>; firstOnly: boolean; };
export type ApiUrlsPlain = {
    readonly baselineImage?: undefined | string;
    readonly currentImage?: undefined | string;
    readonly checkpointImage?: undefined | string;
    readonly checkpointImageThumbnail?: undefined | string;
    readonly diffImage?: undefined | string;
};
export class ApiUrls implements Required<ApiUrlsPlain> {
    get baselineImage(): string;
    getBaselineImage(): string;
    get currentImage(): string;
    getCurrentImage(): string;
    get checkpointImage(): string;
    getCheckpointImage(): string;
    get checkpointImageThumbnail(): string;
    getCheckpointImageThumbnail(): string;
    get diffImage(): string;
    getDiffImage(): string;
}
export type AppUrlsPlain = { readonly step?: undefined | string; readonly stepEditor?: undefined | string; };
export class AppUrls implements Required<AppUrlsPlain> {
    get step(): string;
    getStep(): string;
    get stepEditor(): string;
    getStepEditor(): string;
}
export type MatchResultPlain = { readonly asExpected?: undefined | boolean; readonly windowId?: undefined | number; };
export class MatchResult implements Required<MatchResultPlain> {
    get asExpected(): boolean;
    getAsExpected(): boolean;
    get windowId(): number;
    getWindowId(): number;
}
export type SessionUrlsPlain = { readonly batch?: undefined | string; readonly session?: undefined | string; };
export class SessionUrls implements Required<SessionUrlsPlain> {
    get batch(): string;
    getBatch(): string;
    get session(): string;
    getSession(): string;
}
export type StepInfoPlain = {
    readonly name?: undefined | string;
    readonly isDifferent?: undefined | boolean;
    readonly hasBaselineImage?: undefined | boolean;
    readonly hasCurrentImage?: undefined | boolean;
    readonly appUrls?: undefined | AppUrlsPlain;
    readonly apiUrls?: undefined | ApiUrlsPlain;
    readonly renderId?: undefined | Array<string>;
};
export class StepInfo implements Required<StepInfoPlain> {
    get name(): string;
    getName(): string;
    get isDifferent(): boolean;
    getIsDifferent(): boolean;
    get hasBaselineImage(): boolean;
    getHasBaselineImage(): boolean;
    get hasCurrentImage(): boolean;
    getHasCurrentImage(): boolean;
    get appUrls(): AppUrlsPlain;
    getAppUrls(): AppUrls;
    get apiUrls(): ApiUrlsPlain;
    getApiUrls(): ApiUrls;
    get renderId(): Array<string>;
    getRenderId(): Array<string>;
}
export type TestAccessibilityStatus = { readonly status: AccessibilityStatusPlain; readonly level: AccessibilityLevelPlain; readonly version: AccessibilityGuidelinesVersionPlain; };
export type TestResultsPlain = {
    readonly id?: undefined | string;
    readonly name?: undefined | string;
    readonly secretToken?: undefined | string;
    readonly status?: undefined | "Passed" | "Unresolved" | "Failed";
    readonly appName?: undefined | string;
    readonly batchId?: undefined | string;
    readonly batchName?: undefined | string;
    readonly branchName?: undefined | string;
    readonly hostOS?: undefined | string;
    readonly hostApp?: undefined | string;
    readonly hostDisplaySize?: undefined | RectangleSizePlain;
    readonly accessibilityStatus?: undefined | TestAccessibilityStatus;
    readonly startedAt?: undefined | string | Date;
    readonly duration?: undefined | number;
    readonly isNew?: undefined | boolean;
    readonly isDifferent?: undefined | boolean;
    readonly isAborted?: undefined | boolean;
    readonly appUrls?: undefined | SessionUrlsPlain;
    readonly apiUrls?: undefined | SessionUrlsPlain;
    readonly stepsInfo?: undefined | Array<StepInfoPlain>;
    readonly steps?: undefined | number;
    readonly matches?: undefined | number;
    readonly mismatches?: undefined | number;
    readonly missing?: undefined | number;
    readonly exactMatches?: undefined | number;
    readonly strictMatches?: undefined | number;
    readonly contentMatches?: undefined | number;
    readonly layoutMatches?: undefined | number;
    readonly noneMatches?: undefined | number;
    readonly url?: undefined | string;
};
export class TestResults implements Required<TestResultsPlain> {
    get id(): string;
    getId(): string;
    get name(): string;
    getName(): string;
    get secretToken(): string;
    getSecretToken(): string;
    get status(): TestResultsStatusPlain;
    getStatus(): TestResultsStatus;
    get appName(): string;
    getAppName(): string;
    get batchName(): string;
    getBatchName(): string;
    get batchId(): string;
    getBatchId(): string;
    get branchName(): string;
    getBranchName(): string;
    get hostOS(): string;
    getHostOS(): string;
    get hostApp(): string;
    getHostApp(): string;
    get hostDisplaySize(): RectangleSizePlain;
    getHostDisplaySize(): RectangleSize;
    get accessibilityStatus(): TestAccessibilityStatus;
    getAccessibilityStatus(): TestAccessibilityStatus;
    get startedAt(): string | Date;
    getStartedAt(): Date;
    get duration(): number;
    getDuration(): number;
    get isNew(): boolean;
    getIsNew(): boolean;
    get isDifferent(): boolean;
    getIsDifferent(): boolean;
    get isAborted(): boolean;
    getIsAborted(): boolean;
    get appUrls(): SessionUrlsPlain;
    getAppUrls(): SessionUrls;
    get apiUrls(): SessionUrlsPlain;
    getApiUrls(): SessionUrls;
    get stepsInfo(): Array<StepInfoPlain>;
    getStepsInfo(): Array<StepInfo>;
    get steps(): number;
    getSteps(): number;
    get matches(): number;
    getMatches(): number;
    get mismatches(): number;
    getMismatches(): number;
    get missing(): number;
    getMissing(): number;
    get exactMatches(): number;
    getExactMatches(): number;
    get strictMatches(): number;
    getStrictMatches(): number;
    get contentMatches(): number;
    getContentMatches(): number;
    get layoutMatches(): number;
    getLayoutMatches(): number;
    get noneMatches(): number;
    getNoneMatches(): number;
    get url(): string;
    getUrl(): string;
    isPassed(): boolean;
    delete(): Promise<void>;
}
export type TestResultContainerPlain = { readonly exception?: undefined | Error; readonly testResults?: undefined | TestResultsPlain; readonly browserInfo?: undefined | (DesktopBrowserInfo | ChromeEmulationInfo | { deviceName: DeviceNamePlain; screenOrientation?: undefined | "landscape" | "portrait"; } | IOSDeviceInfo | AndroidDeviceInfo); };
export class TestResultContainer implements Required<TestResultContainerPlain> {
    get testResults(): TestResultsPlain;
    getTestResults(): TestResults;
    get exception(): Error;
    getException(): Error;
    get browserInfo(): DesktopBrowserInfo | ChromeEmulationInfo | { deviceName: DeviceNamePlain; screenOrientation?: undefined | "landscape" | "portrait"; } | IOSDeviceInfo | AndroidDeviceInfo;
    getBrowserInfo(): DesktopBrowserInfo | ChromeEmulationInfo | { deviceName: DeviceNamePlain; screenOrientation?: undefined | "landscape" | "portrait"; } | IOSDeviceInfo | AndroidDeviceInfo;
}
export type TestResultsSummaryPlain = Iterable<TestResultContainerPlain>;
export class TestResultsSummary implements Iterable<TestResultContainer> {
    getAllResults(): Array<TestResultContainer>;
    [Symbol.iterator](): Iterator<TestResultContainer, any, undefined>;
}
export type TextRegion = {
    x: number;
    y: number;
    width: number;
    height: number;
    text: string;
};
export type ValidationInfoPlain = { readonly validationId: number; readonly tag: string; };
export class ValidationInfo implements Required<ValidationInfoPlain> {
    get validationId(): number;
    getValidationId(): number;
    get tag(): string;
    getTag(): string;
}
export type ValidationResultPlain = { readonly asExpected: boolean; };
export class ValidationResult implements Required<ValidationResultPlain> {
    get asExpected(): boolean;
    getAsExpected(): boolean;
}
export type EyesSelector<TSelector = never> = string | TSelector | { selector: string | TSelector; type?: undefined | string; shadow?: undefined | EyesSelector<TSelector>; frame?: undefined | EyesSelector<TSelector>; };
export class Logger {
    constructor(options?: undefined | { show?: undefined | boolean; label?: undefined | string; handler?: undefined | LogHandlerPlain; });
    constructor(show?: undefined | boolean);
    getLogHandler(): LogHandler | FileLogHandler | ConsoleLogHandler;
    setLogHandler(handler: LogHandlerPlain): void;
    verbose(...messages: Array<any>): void;
    log(...messages: Array<any>): void;
    warn(...messages: Array<any>): void;
    error(...messages: Array<any>): void;
    fatal(...messages: Array<any>): void;
    open(): void;
    close(): void;
    tag(name: string, value: any): void;
    extend(label?: undefined | string): Logger;
}
export abstract class EyesRunner {
    getAllTestResults(throwErr?: undefined | boolean): Promise<TestResultsSummary>;
}
export class ClassicRunner extends EyesRunner {
}
export class VisualGridRunner extends EyesRunner {
    constructor(options?: undefined | RunnerOptionsPlain);
    get testConcurrency(): undefined | number;
}
export abstract class SessionEventHandler {
    abstract initStarted(): any;
    abstract initEnded(): any;
    abstract setSizeWillStart(viewportSize: RectangleSize): any;
    abstract setSizeEnded(): any;
    abstract testStarted(sessionId: string): any;
    abstract testEnded(sessionId: string, testResults: TestResults): any;
    abstract validationWillStart(sessionId: string, validationInfo: ValidationInfo): any;
    abstract validationEnded(sessionId: string, validationId: number, validationResult: ValidationResult): any;
}
export class SessionEventHandlers extends SessionEventHandler {
    addEventHandler(handler: SessionEventHandler): void;
    removeEventHandler(handler: SessionEventHandler): void;
    clearEventHandlers(): void;
    initStarted(): void;
    initEnded(): void;
    setSizeWillStart(viewportSize: RectangleSize): void;
    setSizeEnded(): void;
    testStarted(sessionId: string): void;
    testEnded(sessionId: string, testResults: TestResults): void;
    validationWillStart(sessionId: string, validationInfo: ValidationInfo): void;
    validationEnded(sessionId: string, validationId: number, validationResult: ValidationResult): void;
}
export class RemoteSessionEventHandler extends SessionEventHandler {
    constructor(options: { serverUrl: string; accessKey?: undefined | string; timeout?: undefined | number; });
    constructor(serverUrl: string, accessKey?: undefined | string, timeout?: undefined | number);
    get serverUrl(): string;
    set serverUrl(serverUrl: string);
    getServerUrl(): string;
    setServerUrl(serverUrl: string): void;
    get accessKey(): undefined | string;
    set accessKey(accessKey: undefined | string);
    getAccessKey(): undefined | string;
    setAccessKey(accessKey: string): void;
    get timeout(): undefined | number;
    set timeout(timeout: undefined | number);
    setTimeout(timeout: number): void;
    getTimeout(): undefined | number;
    initStarted(): void;
    initEnded(): void;
    setSizeWillStart(): void;
    setSizeEnded(): void;
    testStarted(): void;
    testEnded(): void;
    validationWillStart(): void;
    validationEnded(): void;
}
